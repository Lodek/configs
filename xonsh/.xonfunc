source '~/.xondicts'

def _rc(target):
    """ function to quickly edit some pre-set config files
    target expects a name that matches a key in the rcs dictionary, it then opens emacs for the target file """
    command = ['emacs', '-nw']
    target = target[0]
    if target in rcs:
        command.append(rcs[target])
    else:
        command.append(target)
    $[@(command)]
    
aliases['rc'] = _rc

def _wpbj(target):
    """ Project helper script. user calls wpbj with a target name that is a key in a dictionary,
    it then cds to that directory and source it (hopefully) sources a .env file at the directory """
    pbjs = {}
    pbjs['lazy-arch'] = '/home/lodek/projects/lazy-arch'


    
    target = target[0]
    if target == 'exit':
        pass
        #figure out how to undo changes from past source
    
    elif target in pbjs:
        $[cd @(pbjs[target])]
        $[source .env]

    else:
        print('{} is not a valid target'.format(target))

aliases['wpbj'] = _wpbj
        
def _pandora():
    $[sudo mount --bind /dev /media/extsd/pandora/dev]
    $[sudo chroot /media/extsd/pandora /usr/bin/pianobar]
aliases['pandora'] = _pandora

def _mount_helper(command):
    """ little helper scripts that allows quickly mounting certain pre defined devices
    it has a dictionary with uuids as keys and target directories as values, it will scan all present block devices
    look for a block that it knows and mount it in the specified location. """

    blocks = $(lsblk -o uuid).split()[1:]
    for block in blocks:
        if block in devices:
            options = devices[block]
            mount = 'sudo mount -t {} -U {} {}'.format(*options)
            $[@(mount)]

aliases['mnth'] = _mount_helper            
