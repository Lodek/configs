def _rc(target):
    """ function to quickly edit some pre-set config files
    target expects a name that matches a key in the rcs dictionary, it then opens emacs for the target file """
    rcs = {}
    rcs['e'] = '~/.emacs.d/init.el'
    rcs['za'] = '~/configs/zsh/.zshalias'
    rcs['zf'] = '~/configs/zsh/.zshfunc'
    rcs['z'] = '~/configs/zsh/.zshrc'
    rcs['git'] = '~/configs/git/gitconfig'
    rcs['qt'] = '~/configs/qute/config.py'
    rcs['qute'] = '~/configs/qute/config.py'
    rcs['i3'] = '~/configs/i3/config'
    rcs['tl'] = '~/configs/treeline/treeline-config.py'
    rcs['trees'] = '~/configs/treeline/trees.py'
    rcs['xf'] = '~/configs/xonsh/.xonfunc'
    rcs['xa'] = '~/configs/xonsh/.xonalias'
    rcs['x'] = '~/configs/xonsh/.xonshrc'
    rcs['xe'] = '~/configs/xonsh/.xonenv'

    command = ['emacs', '-nw']
    target = target[0]
    if target in rcs:
        command.append(rcs[target])
    else:
        command.append(target)
    $[@(command)]
    
aliases['rc'] = _rc

def _wpbj(target):
    """ Project helper script. user calls wpbj with a target name that is a key in a dictionary,
    it then cds to that directory and source it (hopefully) sources a .env file at the directory """
    pbjs = {}
    pbjs['lazy-arch'] = '/home/lodek/projects/lazy-arch'


    
    target = target[0]
    if target == 'exit':
        pass
        #figure out how to undo changes from past source
    
    elif target in pbjs:
        $[cd @(pbjs[target])]
        $[source .env]

    else:
        print('{} is not a valid target'.format(target))

aliases['wpbj'] = _wpbj
        
    
